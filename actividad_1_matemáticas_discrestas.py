# -*- coding: utf-8 -*-
"""Actividad_1_Matemáticas DIscrestas

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ArtRU5qIB6YfhF0fStMJ_RLI2bm5SF2C

**Para algun (Existencial )**
"""

import sympy as sp
from sympy.abc import x, y

domain = range(1, 11) # Modifique el dominio de acuerdo al problema asignado.

def universal_quantifier(predicate, domain):
    return all(predicate(i) for i in domain)

def existential_quantifier(predicate, domain):
    return any(predicate(i) for i in domain)

# Example predicates
P = lambda x: x % 2 == 0
Q = lambda x: x > 5

print("∀x (x is even):", universal_quantifier(P, domain))
print("∀x (x > 0):", universal_quantifier(lambda x: x > 0, domain))
print("∀x (x > 5):", universal_quantifier(Q, domain))

print("∃x (x is even):", existential_quantifier(P, domain))
print("∃x (x > 10):", existential_quantifier(lambda x: x > 10, domain))
print("∃x (x > 5):", existential_quantifier(Q, domain))

"""**Para todos (Universal)**"""

import sympy as sp
from sympy.abc import x, y

domain_x = range(1, 11) # Modifique el dominio de acuerdo al problema asignado.
domain_y = range(1, 11) # Modifique el dominio de acuerdo al problema asignado.

def nested_quantifier(predicate, domain_x, domain_y):
    for i in domain_x:
        found = False
        for j in domain_y:
            if predicate(i, j):
                print(f"x = {i}, y = {j}, P(x, y) = {predicate(i, j)}")
                found = True
                break
        if not found:
            return False
    return True

P = lambda x, y: (x + y) % 2 == 0

print("\nSo, the full expression: ∀x ∃y (x + y is even) is:", nested_quantifier(P, domain_x, domain_y))

import math

domain_x = range(-5, 6)
domain_y = range(-10, 11)

def nested_existential_cos(domain_x, domain_y):
    for x in domain_x:
        found = False
        for y in domain_y:
            #Intrucción: El predicado es cos(x+y) < 1/2
            if math.cos(x + y) < 0.5:
                print(f"x = {x}, y = {y}, cos(x+y) = {math.cos(x+y):.3f}")
                found = True
                break
        if not found:
            return False
    return True

print("∀x ∃y (cos(x+y) < 1/2) is: ", nested_existential_cos(domain_x, domain_y))

domain = range(-5, 6)  # dominio de enteros pequeños

def es_par(n):
    return n % 2 == 0

def proposicion(a, domain):
    return any(es_par(a + b) for b in domain)

resultado = all(proposicion(a, domain) for a in domain)

print("∀a ∃b tal que a+b es par:", resultado)